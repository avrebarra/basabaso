// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package userservice_test

import (
	"context"
	"github.com/avrebarra/basabaso/subsys/userservice"
	"github.com/avrebarra/basabaso/subsys/userstore"
	"sync"
)

// Ensure, that StoreMock does implement userservice.Store.
// If this is not the case, regenerate this file with moq.
var _ userservice.Store = &StoreMock{}

// StoreMock is a mock implementation of userservice.Store.
//
//     func TestSomethingThatUsesStore(t *testing.T) {
//
//         // make and configure a mocked userservice.Store
//         mockedStore := &StoreMock{
//             FindFunc: func(ctx context.Context, in userstore.FindInput) ([]userstore.User, int64, error) {
// 	               panic("mock out the Find method")
//             },
//             PersistFunc: func(ctx context.Context, in *userstore.User) error {
// 	               panic("mock out the Persist method")
//             },
//         }
//
//         // use mockedStore in code that requires userservice.Store
//         // and then make assertions.
//
//     }
type StoreMock struct {
	// FindFunc mocks the Find method.
	FindFunc func(ctx context.Context, in userstore.FindInput) ([]userstore.User, int64, error)

	// PersistFunc mocks the Persist method.
	PersistFunc func(ctx context.Context, in *userstore.User) error

	// calls tracks calls to the methods.
	calls struct {
		// Find holds details about calls to the Find method.
		Find []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In userstore.FindInput
		}
		// Persist holds details about calls to the Persist method.
		Persist []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *userstore.User
		}
	}
	lockFind    sync.RWMutex
	lockPersist sync.RWMutex
}

// Find calls FindFunc.
func (mock *StoreMock) Find(ctx context.Context, in userstore.FindInput) ([]userstore.User, int64, error) {
	callInfo := struct {
		Ctx context.Context
		In  userstore.FindInput
	}{
		Ctx: ctx,
		In:  in,
	}
	mock.lockFind.Lock()
	mock.calls.Find = append(mock.calls.Find, callInfo)
	mock.lockFind.Unlock()
	if mock.FindFunc == nil {
		var (
			out   []userstore.User
			total int64
			err   error
		)
		return out, total, err
	}
	return mock.FindFunc(ctx, in)
}

// FindCalls gets all the calls that were made to Find.
// Check the length with:
//     len(mockedStore.FindCalls())
func (mock *StoreMock) FindCalls() []struct {
	Ctx context.Context
	In  userstore.FindInput
} {
	var calls []struct {
		Ctx context.Context
		In  userstore.FindInput
	}
	mock.lockFind.RLock()
	calls = mock.calls.Find
	mock.lockFind.RUnlock()
	return calls
}

// Persist calls PersistFunc.
func (mock *StoreMock) Persist(ctx context.Context, in *userstore.User) error {
	callInfo := struct {
		Ctx context.Context
		In  *userstore.User
	}{
		Ctx: ctx,
		In:  in,
	}
	mock.lockPersist.Lock()
	mock.calls.Persist = append(mock.calls.Persist, callInfo)
	mock.lockPersist.Unlock()
	if mock.PersistFunc == nil {
		var (
			err error
		)
		return err
	}
	return mock.PersistFunc(ctx, in)
}

// PersistCalls gets all the calls that were made to Persist.
// Check the length with:
//     len(mockedStore.PersistCalls())
func (mock *StoreMock) PersistCalls() []struct {
	Ctx context.Context
	In  *userstore.User
} {
	var calls []struct {
		Ctx context.Context
		In  *userstore.User
	}
	mock.lockPersist.RLock()
	calls = mock.calls.Persist
	mock.lockPersist.RUnlock()
	return calls
}
